Data Visualization
========================================================
author: Matthew McDonald
date: 1/24/2023
autosize: true

<style>
.mpg-code pre code {
  font-size: 1em;
}
</style>

Loading the Tidyverse
========================================================

One line of code loads the core tidyverse; packages which you will use in almost every data analysis.

It also tells you which functions from the tidyverse conflict with functions in base R (or from other packages you might have loaded).
***

```{r setup}
library(tidyverse)
```

Explicit Calls to packages
==================
If we need to be explicit about where a function (or dataset) comes from, we'll use the special form `package::function()`.

For example, `ggplot2::ggplot()` tells you explicitly that we're using the `ggplot()` function from the ggplot2 package.

First steps
============
First Question: Do cars with big engines use more fuel than cars with small engines?

You probably already have an answer, but try to make your answer precise.

- What does the relationship between engine size and fuel efficiency look like?
- Is it positive?
- Negative?
- Linear?
- Nonlinear?

The `mpg` data frame
===============
class: mpg-code
You can test your answer with the `mpg` **data frame** found in ggplot2 (a.k.a. `ggplot2::mpg`).

A data frame is a rectangular collection of variables (in the columns) and observations (in the rows).

`mpg` contains observations collected by the US Environmental Protection Agency on 38 models of car.


```{r}
mpg
```


Creating a ggplot
===========

```{r eval=FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy))
```

```{r echo=FALSE, fig.width=16, fig.height=10, fig.align='center'}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy), size=8) +
  theme(text = element_text(size=40))
```

ggplot call
===========

With ggplot2, you begin a plot with the function `ggplot()`.

- `ggplot()` creates a coordinate system that you can add layers to.
- The first argument of `ggplot()` is the dataset to use in the graph.
- `ggplot(data = mpg)` creates an empty graph

Complete your graph by adding one or more layers to `ggplot()`.

- The function `geom_point()` adds a layer of points to your plot, which creates a scatterplot.

mapping argument
=========
Each geom function in ggplot2 takes a `mapping` argument.

- This defines how variables in your dataset are mapped to visual properties of your plot.

The  `mapping`  argument is always paired with `aes()`, and the `x` and `y` arguments of `aes()` specify which variables to map to the x and y axes.

- ggplot2 looks for the mapped variables in the `data` argument, in this case, `mpg`.

A graphing template
============

```{r, eval = FALSE}
ggplot(data = <DATA>) + 
  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))
```

Aesthetic mappings (1)
============

In this plot, one group of points (highlighted in red) seems to fall outside of the linear trend.

These cars have a higher mileage than you might expect.

How can you explain these cars?
************
```{r, echo = FALSE, fig.dim=c(10,10)}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
  geom_point(size=5) + 
  geom_point(data = dplyr::filter(mpg, displ > 5, hwy > 20), colour = "red", size = 5) +
  theme(text = element_text(size=30))
```


Aesthetic mappings (2)
============

You can add a third variable, like `class`, to a two dimensional scatterplot by mapping it to an **aesthetic**.

An aesthetic is a visual property of the objects in your plot.


```{r eval=FALSE}

ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = class))

```

```{r echo=FALSE, fig.width=13, fig.height=8, fig.align='center'}

ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = class), size=4) +
  theme(text = element_text(size=30))

```

Facets
============

Another way, particularly useful for categorical variables, is to split your plot into **facets**, subplots that each display one subset of the data.

To facet your plot by a single variable, use `facet_wrap()`.

The first argument of `facet_wrap()` is a formula, which you create with `~` followed by a variable name (here, "formula" is the name of a data structure in R, not a synonym for "equation").

The variable that you pass to `facet_wrap()` should be discrete.

facet_wrap()
================

```{r eval=FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_wrap(~ class, nrow = 2)
```

```{r echo=FALSE, fig.width=13, fig.height=8, fig.align='center'}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy), size=4) + 
  facet_wrap(~ class, nrow = 2)  +
  theme(text = element_text(size=30))
```

facet_grid()
======================

To facet your plot on the combination of two variables, add `facet_grid()` to your plot call.  The first argument of `facet_grid()` is also a formula containing two variable names separated by a `~`.

```{r eval=FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_grid(drv ~ cyl)
```

```{r echo=FALSE, fig.width=13, fig.height=8, fig.align='center'}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy), size = 4) + 
  facet_grid(drv ~ cyl)  +
  theme(text = element_text(size=30))
```

How are these two plots similar?
======================

```{r eval=FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy))
```

```{r echo=FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy), size=4) +
  theme(text = element_text(size=30)) + ylim(10,45)
```

****
```{r eval=FALSE}
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy)) 
```

```{r echo=FALSE}
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy)) +
  theme(text = element_text(size=30)) + ylim(10,45)
```

Geometric Objects
==================

Each plot uses a different visual object to represent the data. In ggplot2 syntax, we say that they use different **geoms**.

A **geom** is the geometrical object that a plot uses to represent data.

For example, bar charts use bar geoms, line charts use line geoms, boxplots use boxplot geoms, and so on. Scatterplots break the trend; they use the point geom.

Every geom function in ggplot2 takes a `mapping` argument.
However, not every aesthetic works with every geom.
You could set the shape of a point, but you couldn't set the "shape" of a line.
On the other hand, you *could* set the linetype of a line.

geom_smooth()
==================
`geom_smooth()` will draw a different line, with a different linetype, for each unique value of the variable that you map to linetype.

Here `geom_smooth()` separates the cars into three lines based on their `drv` value, which describes a car's drive train.

Here, `4` stands for four-wheel drive, `f` for front-wheel drive, and `r` for rear-wheel drive.
********
```{r, message = FALSE, eval=FALSE}
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
```


```{r, message = FALSE, echo=FALSE}
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv)) +
  theme(text = element_text(size=30))
```
Coloring by drive
=================

If this sounds strange, we can make it more clear by overlaying the lines on top of the raw data and then colouring everything according to `drv`.

```{r, echo = FALSE, fig.width=13, fig.height=8, fig.align='center'}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) + 
  geom_point(size=4) +
  geom_smooth(mapping = aes(linetype = drv)) +
  theme(text = element_text(size=30))
```

More Geoms
=================

ggplot2 provides over 40 geoms, and extension packages provide even more (see <https://exts.ggplot2.tidyverse.org/gallery/> for a sampling).

The best way to get a comprehensive overview is the ggplot2 cheatsheet, which you can find at <http://rstudio.com/resources/cheatsheets>.

To learn more about any single geom, use help, e.g. `?geom_smooth`.

Grouping
================

```{r eval=FALSE}
ggplot(data = mpg) +
  geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
```

```{r echo=FALSE}
ggplot(data = mpg) +
  geom_smooth(mapping = aes(x = displ, y = hwy, group = drv)) +
  theme(text = element_text(size=30))
```
***
```{r eval=FALSE}
ggplot(data = mpg) +
  geom_smooth(
    mapping = aes(x = displ, y = hwy, color = drv),
    show.legend = FALSE)
```

```{r echo=FALSE}
ggplot(data = mpg) +
  geom_smooth(
    mapping = aes(x = displ, y = hwy, color = drv),
    show.legend = FALSE
  ) +
  theme(text = element_text(size=30))
```
Multiple Geoms in Same Plot
==============
To display multiple geoms in the same plot, add multiple geom functions to `ggplot()`:

```{r, message = FALSE, eval=FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) +
  geom_smooth(mapping = aes(x = displ, y = hwy))
```

```{r, message = FALSE, echo=FALSE, fig.width=13, fig.height=7, fig.align='center'}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy), size=4) +
  geom_smooth(mapping = aes(x = displ, y = hwy)) +
  theme(text = element_text(size=30))
```

This, however, introduces some duplication in our code.

Global Mappings
===============
You can avoid this type of repetition by passing a set of mappings to `ggplot()`.
ggplot2 will treat these mappings as global mappings that apply to each geom in the graph.
In other words, this code will produce the same plot as the previous code:

```{r, eval = FALSE}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point() + 
  geom_smooth()
```


Layer-Specific Mappings
==============
If you place mappings in a geom function, ggplot2 will treat them as local mappings for the layer.
It will use these mappings to extend or overwrite the global mappings *for that layer only*.
This makes it possible to display different aesthetics in different layers.

```{r, message = FALSE, eval=FALSE}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point(mapping = aes(color = class)) + 
  geom_smooth()
```

```{r, message = FALSE, echo=FALSE, fig.width=13, fig.height=7, fig.align='center'}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point(mapping = aes(color = class), size=4) + 
  geom_smooth() +
  theme(text = element_text(size=30))
```

Layer-Specific Data
============
You can use the same idea to specify different `data` for each layer.
Here, our smooth line displays just a subset of the `mpg` dataset, the subcompact cars.
The local data argument in `geom_smooth()` overrides the global data argument in `ggplot()` for that layer only.

```{r, message = FALSE, eval=FALSE}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point(mapping = aes(color = class)) + 
  geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
```

```{r, message = FALSE, echo=FALSE, fig.width=13, fig.height=7, fig.align='center'}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point(mapping = aes(color = class), size=4) + 
  geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE) +
  theme(text = element_text(size=30))
```

Bar Charts
==============

The following chart displays the total number of diamonds in the `diamonds` dataset (a dataset included in ggplot2), grouped by `cut`.  The chart shows that more diamonds are available with high quality cuts than with low quality cuts.

```{r eval=FALSE}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut))
```

```{r echo=FALSE, fig.width=13, fig.height=8, fig.align='center'}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut)) +
  theme(text = element_text(size=30))
```

Bar Charts (2)
==============
On the x-axis, the chart displays `cut`, a variable from `diamonds`.

On the y-axis, it displays count, but count is not a variable in `diamonds`!

Where does count come from?

Many graphs, like scatterplots, plot the raw values of your dataset.

Other graphs, like bar charts, calculate new values to plot:

-   bar charts, histograms, and frequency polygons bin your data and then plot bin counts, the number of points that fall in each bin.

-   smoothers fit a model to your data and then plot predictions from the model.

-   boxplots compute a robust summary of the distribution and then display a specially formatted box.


What if my data **does** include count data?
=========

```{r, warning = FALSE, eval=FALSE}
demo <- tribble(
  ~cut,         ~freq,
  "Fair",       1610,
  "Good",       4906,
  "Very Good",  12082,
  "Premium",    13791,
  "Ideal",      21551
)

ggplot(data = demo) +
  geom_bar(mapping = aes(x = cut, y = freq), stat = "identity")
```
***
```{r, warning = FALSE, echo=FALSE, fig.width=8, fig.height=8, fig.align='center'}
demo <- tribble(
  ~cut,         ~freq,
  "Fair",       1610,
  "Good",       4906,
  "Very Good",  12082,
  "Premium",    13791,
  "Ideal",      21551
)

ggplot(data = demo) +
  geom_bar(mapping = aes(x = cut, y = freq), stat = "identity") +
theme(text = element_text(size=30))
```

Position adjustments
============

Color Aesthetic
===========
There's one more piece of magic associated with bar charts.

You can colour a bar chart using either the `colour` aesthetic

```{r, eval=FALSE}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, colour = cut))
```

```{r, echo=FALSE, fig.width=13, fig.height=8, fig.align='center'}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, colour = cut)) +
theme(text = element_text(size=30))
```

Fill Aesthetic
==============
The Fill Aesthetic is more useful

```{r, eval=FALSE}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = cut))
```

```{r, echo=FALSE, fig.width=13, fig.height=8, fig.align='center'}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = cut)) +
theme(text = element_text(size=30))
```

Stacking
=======
Note what happens if you map the fill aesthetic to another variable, like `clarity`: the bars are automatically stacked.

Each coloured rectangle represents a combination of `cut` and `clarity`.

```{r, eval=FALSE}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = clarity))
```

```{r, echo=FALSE, fig.width=13, fig.height=8, fig.align='center'}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = clarity)) +
theme(text = element_text(size=30))
```

Position Argument
==============
The stacking is performed automatically by the **position adjustment** specified by the `position` argument.
If you don't want a stacked bar chart, you can use one of three other options: `"identity"`, `"dodge"` or `"fill"`.

Position = 'fill'
========
`position = "fill"` works like stacking, but makes each set of stacked bars the same height.

This makes it easier to compare proportions across groups.

```{r, eval=FALSE}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill")
```

```{r, echo=FALSE,  fig.width=13, fig.height=8, fig.align='center'}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill") +
theme(text = element_text(size=30))
```

Position = 'dodge'
========
`position = "dodge"` places overlapping objects directly *beside* one another.

This makes it easier to compare individual values.

```{r,eval=FALSE}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = clarity), position = "dodge")
```

```{r,echo=FALSE,  fig.width=13, fig.height=8, fig.align='center'}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = clarity), position = "dodge")+
theme(text = element_text(size=30))
```

Position = 'jitter'
========

```{r, eval = FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy))
```

```{r, echo = FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) +
theme(text = element_text(size=30))
```

***
```{r, eval=FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy), position = "jitter")
```

```{r, echo=FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy), position = "jitter") +
theme(text = element_text(size=30))
```


Coordinate systems
==========

Coordinate systems are probably the most complicated part of ggplot2.

The default coordinate system is the Cartesian coordinate system where the x and y positions act independently to determine the location of each point.

There are a number of other coordinate systems that are occasionally helpful.

- `coord_flip()` switches the x and y axes.
- `coord_quickmap()` sets the aspect ratio correctly for maps.
- `coord_polar()` uses polar coordinates.

The layered grammar of graphics
===============

Here is an updated template for ggplot code:

    ggplot(data = <DATA>) + 
      <GEOM_FUNCTION>(
         mapping = aes(<MAPPINGS>),
         stat = <STAT>, 
         position = <POSITION>
      ) +
      <COORDINATE_FUNCTION> +
      <FACET_FUNCTION>

The new template takes seven parameters, the bracketed words that appear in the template.

In practice, you rarely need to supply all seven parameters to make a graph because ggplot2 will provide useful defaults for everything except the data, the mappings, and the geom function.

The seven parameters in the template compose the grammar of graphics, a formal system for building plots.

The grammar of graphics is based on the insight that you can uniquely describe *any* plot as a combination of a dataset, a geom, a set of mappings, a stat, a position adjustment, a coordinate system, and a faceting scheme.

